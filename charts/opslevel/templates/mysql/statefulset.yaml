{{- if eq .Values.mysql.external false }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  labels:
    app.kubernetes.io/component: app
    app.kubernetes.io/part-of: mysql
spec:
  serviceName: mysql
  replicas: 1
  revisionHistoryLimit: 3
  updateStrategy:
    rollingUpdate:
      partition: 0
  selector:
    matchLabels:
      app.kubernetes.io/component: app
      app.kubernetes.io/part-of: mysql
  template:
    metadata:
      labels:
        app.kubernetes.io/component: app
        app.kubernetes.io/part-of: mysql
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/mysql/secret.yaml") . | sha256sum }}
{{- with .Values.mysql.pod.annotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      {{- template "opslevel.pullSecrets" . }}
      {{- template "global.nodeSelector" . }}
      serviceAccountName: "{{ .Values.mysql.serviceAccount.name }}"
      priorityClassName: opslevel-critical
      containers:
        - name: mysql
          image: {{ template "mysql.image" . }}
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
            - name: config
              mountPath: /etc/mysql/conf.d/
          envFrom: &envFrom
            - secretRef:
                name: '{{ .Values.mysql.secret.name }}'
          ports:
            - name: mysql
              containerPort: 3306
          {{- with .Values.mysql.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec: &health-check
              command:
                - /bin/bash
                - -ec
                - mysqladmin status -uroot -p"${MYSQL_ROOT_PASSWORD}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              <<: *health-check
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              <<: *health-check
      volumes:
      - name: config
        configMap:
          name: mysql
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if .Values.mysql.storageClass }}
        storageClassName: '{{ .Values.mysql.storageClass }}'
        {{- end }}
        resources:
          requests:
            storage: '{{ .Values.mysql.storageSize}}'
  {{- end }}