{{- if .Values.runner.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opslevel-runner-faktory
  labels:
    app.kubernetes.io/component: app
    app.kubernetes.io/part-of: runner-faktory
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/component: app
      app.kubernetes.io/part-of: runner-faktory
  revisionHistoryLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/component: app
        app.kubernetes.io/part-of: runner-faktory
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/runner/secret.yaml") . | sha256sum }}
{{- with .Values.runner.pod.annotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      {{- template "opslevel.pullSecrets" . }}
      {{- template "global.nodeSelector" . }}
      priorityClassName: {{ .Values.priorityClasses.normal }}
      {{- with .Values.runner.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.runner.serviceAccount.name }}
      {{- if .Values.certificate.enabled }}
      initContainers:
        - name: init-certs
          image: "{{ template "opslevel.image" . }}"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - sleep 10; update-ca-certificates; cp -r /etc/ssl/certs/. /data;
          volumeMounts:
            - name: certificate
              mountPath: /usr/local/share/ca-certificates/custom-cert.crt
              subPath: custom-cert.crt
              readOnly: false
            - name: ca
              mountPath: /data
              readOnly: false
      {{- end }}
      containers:
        - name: runner
          image: '{{ template "runner.image" . }}'
          imagePullPolicy: IfNotPresent
          args:
            - run
            {{- if .Values.runner.config.create }}
            - --config=/opslevel/opslevel.yaml
            {{- end }}
            - --api-url=http://$(OPSLEVEL_SERVICE_HOST):$(OPSLEVEL_SERVICE_PORT_HTTP)
            - --mode=faktory
            - --queues=runner
            - --job-pod-namespace={{ .Release.Namespace }}
            - --job-pod-max-wait=300
            - --job-pod-requests-cpu=300
            - --job-pod-limits-cpu=1000
            - --job-pod-requests-memory=512
            - --job-pod-limits-memory=2048
          env:
          - name: RUNNER_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: RUNNER_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          envFrom: &envFrom
            - secretRef:
                name: '{{ .Values.runner.secret.name }}'
          {{- with .Values.runner.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if or .Values.certificate.enabled .Values.runner.config.create }}
          volumeMounts:
            {{- if .Values.certificate.enabled }}
            - name: certificate
              mountPath: /usr/local/share/ca-certificates/custom-cert.crt
              subPath: custom-cert.crt
              readOnly: false
            - name: ca
              mountPath: /etc/ssl/certs
            {{- end }}
            {{- if .Values.runner.config.create }}
            - name: settings
              mountPath: /opslevel/
            {{- end }}
          {{- end }}
      {{- if or .Values.certificate.enabled .Values.runner.config.create }}
      volumes:
        {{- if .Values.certificate.enabled }}
        - name: ca
          emptyDir: {}
        - name: certificate
          secret:
            secretName: {{ .Values.certificate.secret.name }}
        {{- end }}
        {{- if .Values.runner.config.create}}
        - name: settings
          configMap:
            name: {{ .Values.runner.config.name }}
        {{- end }}
      {{- end }}
{{- end }}