{{- if eq .Values.elasticsearch.external false }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  labels:
    app.kubernetes.io/component: app
    app.kubernetes.io/part-of: elasticsearch
spec:
  replicas: 1
  serviceName: elasticsearch
  selector:
    matchLabels:
      app.kubernetes.io/component: app
      app.kubernetes.io/part-of: elasticsearch
  template:
    metadata:
      labels:
        app.kubernetes.io/component: app
        app.kubernetes.io/part-of: elasticsearch
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/elasticsearch/secret.yaml") . | sha256sum }}
    spec:
      {{- template "opslevel.pullSecrets" . }}
      {{- template "global.nodeSelector" . }}
      priorityClassName: opslevel-high
      securityContext:
        fsGroup: 0
      subdomain: elasticsearch
      containers:
        - name: elasticsearch
          image: '{{ template "elasticsearch.image" . }}'
          imagePullPolicy: IfNotPresent
          {{- with .Values.elasticsearch.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: bootstrap.memory_lock
              value: 'true'
            - name: discovery.type
              value: single-node
            - name: ES_JAVA_OPTS
              value: '-Xlog:disable -Xlog:all=warning:stderr:utctime,level,tags -Xlog:gc=debug:stderr:utctime'
          envFrom:
          - secretRef:
              name: '{{ .Values.elasticsearch.secret.name }}'
          ports:
          - containerPort: 9200
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - ReadWriteOnce
      {{- if .Values.elasticsearch.storageClass }}
      storageClassName: '{{ .Values.elasticsearch.storageClass }}'
      {{- end }}
      resources:
        requests:
          storage: '{{ .Values.elasticsearch.storageSize }}'
{{- end }}